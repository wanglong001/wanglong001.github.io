var Gem = require('Gem')
var proto = require('proto')

module.exports = proto(Gem, function(superclass) {
	// static variables
    this.name = 'CheckBox'

	// instance methods
	this.init = function(label) {
        this.domNode = document.createElement("input") // do this before calling the superclass constructor so that an extra useless domNode isn't created inside it
        this.label = label
		this.attr('type','checkbox')

        superclass.init.apply(this, arguments) // superclass constructor
	}

    Object.defineProperty(this, 'selected', {
        // returns whether or not the checkbox is checked
        get: function() {
            return this.domNode.checked
        },
        // sets the value of the checkbox to the passed value (true for checked)
        set: function(checked) {
            var newValue = checked === true
            var curValue = this.domNode.checked
            if(curValue === newValue) return;  // do nothing if nothing's changing

            this.domNode.checked = newValue
            this.emit('change') // the browser has no listenable event that is triggered on change of the 'checked' property
        }
    })
})
